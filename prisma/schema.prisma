generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  account_id    Int             @id @default(autoincrement())
  first_name    String          @db.VarChar(50)
  last_name     String          @db.VarChar(50)
  email         String          @unique @db.VarChar(50)
  password      String          @db.VarChar(50)
  account_type  String          @db.VarChar(50)
  created_at    DateTime        @default(now())
  avatar        String          @default("https://upload.wikimedia.org/wikipedia/commons/a/ac/Default_pfp.jpg") @db.VarChar(150)
  phone_number  String          @unique @db.VarChar(50)
  Admin         Admin[]
  Notifications Notifications[]
  Organizer     Organizer[]
  Client        Client[]

  @@unique([first_name, last_name])
}

model Admin {
  ad_id      Int     @id @default(autoincrement())
  account_id Int     @unique
  Account    Account @relation(fields: [account_id], references: [account_id], onDelete: Cascade, map: "FK_Admin_Account")

  @@index([account_id])
}

model Organizer {
  org_id        Int     @id @default(autoincrement())
  org_country   String  @default("My Country") @db.VarChar(50)
  personalStore String  @default("My personal Store") @db.VarChar(150)
  account_id    Int     @unique
  Events        Event[]
  Account       Account @relation(fields: [account_id], references: [account_id], onDelete: Cascade, map: "FK_Organizer_Account")

  @@index([account_id])
}

model Client {
  client_id      Int              @id @default(autoincrement())
  address        String           @default("My Address") @db.VarChar(50)
  country        String           @default("My Country") @db.VarChar(50)
  account_id     Int              @unique
  city           String           @default("My City") @db.VarChar(50)
  ClientWaitList ClientWaitList[]
  Orders_Cart    Orders_Cart[]
  Account        Account          @relation(fields: [account_id], references: [account_id], onDelete: Cascade, map: "FK_Client_Account")
}

model ClientWaitList {
  client_wait_id Int    @id @default(autoincrement())
  client_id      Int
  event_id       Int
  Client         Client @relation(fields: [client_id], references: [client_id], onDelete: Cascade, map: "FK_ClientWaitList_Client")
  Event          Event  @relation(fields: [event_id], references: [event_id], onDelete: Cascade, map: "FK_ClientWaitList_Event")

  @@index([client_id])
  @@index([event_id])
}

model Event {
  event_id              Int                   @id @default(autoincrement())
  org_id                Int
  duration              String
  trailer_video_url     String                @db.VarChar(200)
  description           String                @db.VarChar(500)
  brand_url             String                @db.VarChar(100)
  location              String                @db.VarChar(50)
  start_time            DateTime              @db.DateTime(0)
  finish_time           DateTime              @db.DateTime(0)
  number_sold_tickets   Int
  number_of_waiters     Int
  max_number_attendants Int
  is_start_selling      Boolean
  event_type            String                @db.VarChar(50)
  is_review_enabled     Boolean
  is_approved           Boolean
  title                 String                @default("My event title") @db.VarChar(100)
  ClientWaitList        ClientWaitList[]
  Organizer             Organizer             @relation(fields: [org_id], references: [org_id], onDelete: Cascade, map: "FK_Event_Organizer")
  Event_Images          Event_Images[]
  Event_Review          Event_Review[]
  Orders_Cart           Orders_Cart[]
  Paid_Tickets_Orders   Paid_Tickets_Orders[]
  SeatCategory          SeatCategory[]
  Ticket                Ticket[]

  @@index([org_id])
}

model Event_Images {
  img_id   Int    @id @default(autoincrement())
  event_id Int
  img_url  String @db.VarChar(70)
  Event    Event  @relation(fields: [event_id], references: [event_id], onDelete: Cascade, map: "FK_Event_Images_Event")

  @@index([event_id])
}

model Event_Review {
  review_id  Int      @id @default(autoincrement())
  event_id   Int
  message    String   @db.VarChar(100)
  rating     Int
  created_at DateTime @default(now())
  Event      Event    @relation(fields: [event_id], references: [event_id], onDelete: Cascade, map: "FK_Event_Review_Event")

  @@index([event_id])
}

model Notifications {
  not_id      Int      @id @default(autoincrement())
  account_id  Int
  not_message String   @db.VarChar(300)
  created_at  DateTime @default(now())
  Account     Account  @relation(fields: [account_id], references: [account_id], onDelete: Cascade, map: "FK_Notifications_Account")

  @@index([account_id])
}

model Orders_Cart {
  order_id            Int                   @id @default(autoincrement())
  quantity            Int
  total_price         Float                 @db.Float
  Ordered_at          DateTime              @default(now())
  event_id            Int
  ticket_type_id      Int
  client_id           Int
  is_paid             Boolean
  Client              Client                @relation(fields: [client_id], references: [client_id], onDelete: Cascade, map: "FK_Orders_Cart_Client")
  Event               Event                 @relation(fields: [event_id], references: [event_id], onDelete: Cascade, map: "FK_Orders_Cart_Event")
  Paid_Tickets_Orders Paid_Tickets_Orders[]

  @@index([client_id])
  @@index([event_id])
}

model Paid_Tickets_Orders {
  paid_orders_id Int         @id @default(autoincrement())
  order_id       Int
  ticket_id      Int
  event_id       Int
  Event          Event       @relation(fields: [event_id], references: [event_id], onDelete: Cascade, map: "FK_Paid_Tickets_Orders_Event")
  Orders_Cart    Orders_Cart @relation(fields: [order_id], references: [order_id], onUpdate: NoAction, map: "FK_Paid_Tickets_Orders_Orders_Cart")
  Ticket         Ticket      @relation(fields: [ticket_id], references: [ticket_id], onDelete: Cascade, onUpdate: NoAction, map: "FK_Paid_Tickets_Orders_Ticket")

  @@index([event_id])
  @@index([order_id])
  @@index([ticket_id])
}

model SeatCategory {
  seat_categ_id    Int    @id @default(autoincrement())
  event_id         Int
  type_name        String @db.VarChar(50)
  type_price       Int
  type_description String @db.VarChar(50)
  number_max       Int
  number_avialable Int
  max_uses         Int
  Event            Event  @relation(fields: [event_id], references: [event_id], onDelete: Cascade, map: "FK_SeatCategory_Event")

  @@index([event_id])
}

model Ticket {
  ticket_id           Int                   @id @default(autoincrement())
  client_id           Int
  event_id            Int
  qrcode              String                @unique @db.VarChar(100)
  ticket__type_id     Int
  created_at          DateTime              @default(now())
  num_uses            Int
  Paid_Tickets_Orders Paid_Tickets_Orders[]
  Event               Event                 @relation(fields: [event_id], references: [event_id], onDelete: Cascade, map: "FK_Ticket_Event")

  @@index([event_id])
}
